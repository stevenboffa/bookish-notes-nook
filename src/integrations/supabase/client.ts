
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { CloudSun, Database as DatabaseIcon } from 'lucide-react';

// Environment configuration
interface EnvironmentConfig {
  url: string;
  key: string;
}

const environments: Record<string, EnvironmentConfig> = {
  production: {
    url: "https://cotmtwabbkxrvbjygnwk.supabase.co",
    key: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNvdG10d2FiYmt4cnZianlnbndrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzgyODk4MDgsImV4cCI6MjA1Mzg2NTgwOH0.o8dtLdlIC6jdU4O1d_7KDXAXP-DPkbINAz5mQ55haVw"
  },
  staging: {
    url: import.meta.env.VITE_SUPABASE_STAGING_URL || "",
    key: import.meta.env.VITE_SUPABASE_STAGING_KEY || ""
  }
};

// Determine current environment
const isDev = import.meta.env.DEV;
const isStaging = import.meta.env.VITE_USE_STAGING === 'true';
const environment = isStaging ? 'staging' : 'production';

// Use the appropriate credentials based on environment
const SUPABASE_URL = environments[environment].url;
const SUPABASE_PUBLISHABLE_KEY = environments[environment].key;

// Display environment info in the console with a clear distinction
console.log(`%cðŸ”Œ Supabase Environment: ${environment.toUpperCase()}`, 
  `font-weight: bold; color: ${environment === 'staging' ? '#3b82f6' : '#10b981'}; 
   background-color: ${environment === 'staging' ? '#dbeafe' : '#d1fae5'}; 
   padding: 4px 8px; border-radius: 4px;`
);
console.log(`URL: ${SUPABASE_URL}`);

// Create and render environment indicator in dev mode
if (isDev && typeof document !== 'undefined') {
  // Wait for DOM to be ready
  window.addEventListener('DOMContentLoaded', () => {
    const indicator = document.createElement('div');
    indicator.style.position = 'fixed';
    indicator.style.bottom = '80px'; // Above the navigation bar
    indicator.style.right = '16px';
    indicator.style.backgroundColor = environment === 'staging' ? '#dbeafe' : '#d1fae5';
    indicator.style.color = environment === 'staging' ? '#3b82f6' : '#10b981';
    indicator.style.padding = '8px 12px';
    indicator.style.borderRadius = '4px';
    indicator.style.fontWeight = 'bold';
    indicator.style.fontSize = '14px';
    indicator.style.boxShadow = '0 2px 5px rgba(0,0,0,0.1)';
    indicator.style.zIndex = '9999';
    indicator.style.display = 'flex';
    indicator.style.alignItems = 'center';
    indicator.style.gap = '6px';
    
    // Icon representing the environment
    const iconSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    iconSvg.setAttribute('width', '16');
    iconSvg.setAttribute('height', '16');
    iconSvg.setAttribute('viewBox', '0 0 24 24');
    iconSvg.setAttribute('fill', 'none');
    iconSvg.setAttribute('stroke', 'currentColor');
    iconSvg.setAttribute('stroke-width', '2');
    iconSvg.setAttribute('stroke-linecap', 'round');
    iconSvg.setAttribute('stroke-linejoin', 'round');
    
    // Different icon based on environment
    if (environment === 'staging') {
      // Cloud Sun icon for staging (representing "testing" environment)
      iconSvg.innerHTML = `
        <path d="M12 2v2"/>
        <path d="M12 20v2"/>
        <path d="m4.93 4.93 1.41 1.41"/>
        <path d="m17.66 17.66 1.41 1.41"/>
        <path d="M2 12h2"/>
        <path d="M20 12h2"/>
        <path d="m6.34 17.66-1.41 1.41"/>
        <path d="m19.07 4.93-1.41 1.41"/>
        <path d="M10 15A6 6 0 1 1 20.1 7.9"/>
        <path d="M18.3 14.3C18.1 14.1 18 13.8 18 13.5C18 13.2 18.1 12.9 18.3 12.7C18.5 12.5 18.8 12.4 19.1 12.4C19.4 12.4 19.7 12.5 19.9 12.7C20.1 12.9 20.2 13.2 20.2 13.5C20.2 13.8 20.1 14.1 19.9 14.3C19.7 14.5 19.4 14.6 19.1 14.6C18.8 14.6 18.5 14.5 18.3 14.3Z"/>
      `;
    } else {
      // Database icon for production
      iconSvg.innerHTML = `
        <ellipse cx="12" cy="5" rx="9" ry="3"/>
        <path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"/>
        <path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"/>
      `;
    }
    
    indicator.appendChild(iconSvg);
    indicator.appendChild(document.createTextNode(environment.toUpperCase()));
    document.body.appendChild(indicator);
  });
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  db: {
    schema: 'public',
  },
  global: {
    headers: {
      'x-client-info': `lovable-app-${environment}`
    }
  },
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: typeof window !== 'undefined' ? window.localStorage : undefined
  }
});
